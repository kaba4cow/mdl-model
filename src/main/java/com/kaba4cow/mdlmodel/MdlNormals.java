package com.kaba4cow.mdlmodel;

/**
 * Represents a collection of predefined normal vectors used in {@code MDL} models. These normals are stored as 3D vectors with
 * x, y, and z components, normalized to unit length.
 */
public class MdlNormals {

	private static final float[][] NORMALS = { //
			{ -0.525731f, +0.000000f, +0.850651f }, ////
			{ -0.442863f, +0.238856f, +0.864188f }, //
			{ -0.295242f, +0.000000f, +0.955423f }, //
			{ -0.309017f, +0.500000f, +0.809017f }, //
			{ -0.162460f, +0.262866f, +0.951056f }, //
			{ +0.000000f, +0.000000f, +1.000000f }, //
			{ +0.000000f, +0.850651f, +0.525731f }, //
			{ -0.147621f, +0.716567f, +0.681718f }, //
			{ +0.147621f, +0.716567f, +0.681718f }, //
			{ +0.000000f, +0.525731f, +0.850651f }, //
			{ +0.309017f, +0.500000f, +0.809017f }, //
			{ +0.525731f, +0.000000f, +0.850651f }, //
			{ +0.295242f, +0.000000f, +0.955423f }, //
			{ +0.442863f, +0.238856f, +0.864188f }, //
			{ +0.162460f, +0.262866f, +0.951056f }, //
			{ -0.681718f, +0.147621f, +0.716567f }, //
			{ -0.809017f, +0.309017f, +0.500000f }, //
			{ -0.587785f, +0.425325f, +0.688191f }, //
			{ -0.850651f, +0.525731f, +0.000000f }, //
			{ -0.864188f, +0.442863f, +0.238856f }, //
			{ -0.716567f, +0.681718f, +0.147621f }, //
			{ -0.688191f, +0.587785f, +0.425325f }, //
			{ -0.500000f, +0.809017f, +0.309017f }, //
			{ -0.238856f, +0.864188f, +0.442863f }, //
			{ -0.425325f, +0.688191f, +0.587785f }, //
			{ -0.716567f, +0.681718f, -0.147621f }, //
			{ -0.500000f, +0.809017f, -0.309017f }, //
			{ -0.525731f, +0.850651f, +0.000000f }, //
			{ +0.000000f, +0.850651f, -0.525731f }, //
			{ -0.238856f, +0.864188f, -0.442863f }, //
			{ +0.000000f, +0.955423f, -0.295242f }, //
			{ -0.262866f, +0.951056f, -0.162460f }, //
			{ +0.000000f, +1.000000f, +0.000000f }, //
			{ +0.000000f, +0.955423f, +0.295242f }, //
			{ -0.262866f, +0.951056f, +0.162460f }, //
			{ +0.238856f, +0.864188f, +0.442863f }, //
			{ +0.262866f, +0.951056f, +0.162460f }, //
			{ +0.500000f, +0.809017f, +0.309017f }, //
			{ +0.238856f, +0.864188f, -0.442863f }, //
			{ +0.262866f, +0.951056f, -0.162460f }, //
			{ +0.500000f, +0.809017f, -0.309017f }, //
			{ +0.850651f, +0.525731f, +0.000000f }, //
			{ +0.716567f, +0.681718f, +0.147621f }, //
			{ +0.716567f, +0.681718f, -0.147621f }, //
			{ +0.525731f, +0.850651f, +0.000000f }, //
			{ +0.425325f, +0.688191f, +0.587785f }, //
			{ +0.864188f, +0.442863f, +0.238856f }, //
			{ +0.688191f, +0.587785f, +0.425325f }, //
			{ +0.809017f, +0.309017f, +0.500000f }, //
			{ +0.681718f, +0.147621f, +0.716567f }, //
			{ +0.587785f, +0.425325f, +0.688191f }, //
			{ +0.955423f, +0.295242f, +0.000000f }, //
			{ +1.000000f, +0.000000f, +0.000000f }, //
			{ +0.951056f, +0.162460f, +0.262866f }, //
			{ +0.850651f, -0.525731f, +0.000000f }, //
			{ +0.955423f, -0.295242f, +0.000000f }, //
			{ +0.864188f, -0.442863f, +0.238856f }, //
			{ +0.951056f, -0.162460f, +0.262866f }, //
			{ +0.809017f, -0.309017f, +0.500000f }, //
			{ +0.681718f, -0.147621f, +0.716567f }, //
			{ +0.850651f, +0.000000f, +0.525731f }, //
			{ +0.864188f, +0.442863f, -0.238856f }, //
			{ +0.809017f, +0.309017f, -0.500000f }, //
			{ +0.951056f, +0.162460f, -0.262866f }, //
			{ +0.525731f, +0.000000f, -0.850651f }, //
			{ +0.681718f, +0.147621f, -0.716567f }, //
			{ +0.681718f, -0.147621f, -0.716567f }, //
			{ +0.850651f, +0.000000f, -0.525731f }, //
			{ +0.809017f, -0.309017f, -0.500000f }, //
			{ +0.864188f, -0.442863f, -0.238856f }, //
			{ +0.951056f, -0.162460f, -0.262866f }, //
			{ +0.147621f, +0.716567f, -0.681718f }, //
			{ +0.309017f, +0.500000f, -0.809017f }, //
			{ +0.425325f, +0.688191f, -0.587785f }, //
			{ +0.442863f, +0.238856f, -0.864188f }, //
			{ +0.587785f, +0.425325f, -0.688191f }, //
			{ +0.688191f, +0.587785f, -0.425325f }, //
			{ -0.147621f, +0.716567f, -0.681718f }, //
			{ -0.309017f, +0.500000f, -0.809017f }, //
			{ +0.000000f, +0.525731f, -0.850651f }, //
			{ -0.525731f, +0.000000f, -0.850651f }, //
			{ -0.442863f, +0.238856f, -0.864188f }, //
			{ -0.295242f, +0.000000f, -0.955423f }, //
			{ -0.162460f, +0.262866f, -0.951056f }, //
			{ +0.000000f, +0.000000f, -1.000000f }, //
			{ +0.295242f, +0.000000f, -0.955423f }, //
			{ +0.162460f, +0.262866f, -0.951056f }, //
			{ -0.442863f, -0.238856f, -0.864188f }, //
			{ -0.309017f, -0.500000f, -0.809017f }, //
			{ -0.162460f, -0.262866f, -0.951056f }, //
			{ +0.000000f, -0.850651f, -0.525731f }, //
			{ -0.147621f, -0.716567f, -0.681718f }, //
			{ +0.147621f, -0.716567f, -0.681718f }, //
			{ +0.000000f, -0.525731f, -0.850651f }, //
			{ +0.309017f, -0.500000f, -0.809017f }, //
			{ +0.442863f, -0.238856f, -0.864188f }, //
			{ +0.162460f, -0.262866f, -0.951056f }, //
			{ +0.238856f, -0.864188f, -0.442863f }, //
			{ +0.500000f, -0.809017f, -0.309017f }, //
			{ +0.425325f, -0.688191f, -0.587785f }, //
			{ +0.716567f, -0.681718f, -0.147621f }, //
			{ +0.688191f, -0.587785f, -0.425325f }, //
			{ +0.587785f, -0.425325f, -0.688191f }, //
			{ +0.000000f, -0.955423f, -0.295242f }, //
			{ +0.000000f, -1.000000f, +0.000000f }, //
			{ +0.262866f, -0.951056f, -0.162460f }, //
			{ +0.000000f, -0.850651f, +0.525731f }, //
			{ +0.000000f, -0.955423f, +0.295242f }, //
			{ +0.238856f, -0.864188f, +0.442863f }, //
			{ +0.262866f, -0.951056f, +0.162460f }, //
			{ +0.500000f, -0.809017f, +0.309017f }, //
			{ +0.716567f, -0.681718f, +0.147621f }, //
			{ +0.525731f, -0.850651f, +0.000000f }, //
			{ -0.238856f, -0.864188f, -0.442863f }, //
			{ -0.500000f, -0.809017f, -0.309017f }, //
			{ -0.262866f, -0.951056f, -0.162460f }, //
			{ -0.850651f, -0.525731f, +0.000000f }, //
			{ -0.716567f, -0.681718f, -0.147621f }, //
			{ -0.716567f, -0.681718f, +0.147621f }, //
			{ -0.525731f, -0.850651f, +0.000000f }, //
			{ -0.500000f, -0.809017f, +0.309017f }, //
			{ -0.238856f, -0.864188f, +0.442863f }, //
			{ -0.262866f, -0.951056f, +0.162460f }, //
			{ -0.864188f, -0.442863f, +0.238856f }, //
			{ -0.809017f, -0.309017f, +0.500000f }, //
			{ -0.688191f, -0.587785f, +0.425325f }, //
			{ -0.681718f, -0.147621f, +0.716567f }, //
			{ -0.442863f, -0.238856f, +0.864188f }, //
			{ -0.587785f, -0.425325f, +0.688191f }, //
			{ -0.309017f, -0.500000f, +0.809017f }, //
			{ -0.147621f, -0.716567f, +0.681718f }, //
			{ -0.425325f, -0.688191f, +0.587785f }, //
			{ -0.162460f, -0.262866f, +0.951056f }, //
			{ +0.442863f, -0.238856f, +0.864188f }, //
			{ +0.162460f, -0.262866f, +0.951056f }, //
			{ +0.309017f, -0.500000f, +0.809017f }, //
			{ +0.147621f, -0.716567f, +0.681718f }, //
			{ +0.000000f, -0.525731f, +0.850651f }, //
			{ +0.425325f, -0.688191f, +0.587785f }, //
			{ +0.587785f, -0.425325f, +0.688191f }, //
			{ +0.688191f, -0.587785f, +0.425325f }, //
			{ -0.955423f, +0.295242f, +0.000000f }, //
			{ -0.951056f, +0.162460f, +0.262866f }, //
			{ -1.000000f, +0.000000f, +0.000000f }, //
			{ -0.850651f, +0.000000f, +0.525731f }, //
			{ -0.955423f, -0.295242f, +0.000000f }, //
			{ -0.951056f, -0.162460f, +0.262866f }, //
			{ -0.864188f, +0.442863f, -0.238856f }, //
			{ -0.951056f, +0.162460f, -0.262866f }, //
			{ -0.809017f, +0.309017f, -0.500000f }, //
			{ -0.864188f, -0.442863f, -0.238856f }, //
			{ -0.951056f, -0.162460f, -0.262866f }, //
			{ -0.809017f, -0.309017f, -0.500000f }, //
			{ -0.681718f, +0.147621f, -0.716567f }, //
			{ -0.681718f, -0.147621f, -0.716567f }, //
			{ -0.850651f, +0.000000f, -0.525731f }, //
			{ -0.688191f, +0.587785f, -0.425325f }, //
			{ -0.587785f, +0.425325f, -0.688191f }, //
			{ -0.425325f, +0.688191f, -0.587785f }, //
			{ -0.425325f, -0.688191f, -0.587785f }, //
			{ -0.587785f, -0.425325f, -0.688191f }, //
			{ -0.688191f, -0.587785f, -0.425325f }//
	};

	private MdlNormals() {}

	/**
	 * Returns the complete array of predefined normal vectors.
	 * 
	 * @return a 2D float array where each sub-array contains x, y, z components of a normal vector
	 */
	public static float[][] getNormals() {
		return NORMALS;
	}

	/**
	 * Retrieves a specific normal vector by its index.
	 * 
	 * @param index the index of the desired normal vector
	 * 
	 * @return a float array containing the x, y, z components of the normal vector
	 */
	public static float[] getNormal(int index) {
		return NORMALS[index];
	}

	/**
	 * Returns the total number of predefined normal vectors available.
	 * 
	 * @return the number of normal vectors in the collection
	 */
	public static int getNormalCount() {
		return NORMALS.length;
	}

	/**
	 * Creates an {@link MdlVector} object from a normal vector at the specified index.
	 * 
	 * @param index the index of the desired normal vector
	 * 
	 * @return a new {@link MdlVector} instance representing the normal vector
	 */
	public static MdlVector getNormalVector(int index) {
		return new MdlVector(getNormal(index));
	}

}
